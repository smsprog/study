package icommand;

import java.util.Dictionary;
import java.util.Hashtable;
import java.util.Enumeration;

import AutoGenerated.*;
import uobject.*;

interface IFunctionAd {
  Object run(Class newName, Object obj[]);
}

public class IoC {
	static ThreadLocal< Dictionary<String, IFunction> > sc=new ThreadLocal<>();
	static Dictionary< String, Dictionary<String, IFunction> > allScopes=new Hashtable<>();

	public static void ShowScope() {
		Dictionary<String, IFunction> scope=sc.get();
		
		System.out.println("IoC.ShowScope()");
		Enumeration<String> k = scope.keys();
        while (k.hasMoreElements()) {
            String key = k.nextElement();
            System.out.println("Scope: key="+key+", value="+scope.get(key));
        }
	}

	public static <T> T Resolve(String cname, Object... objects) throws Exception {
		Class[] cArg=new Class[objects.length];
		IFunction f;
		ICommand cmd=null;
		Dictionary<String, IFunction> scope=new Hashtable<>();
		
		if (cname=="Adapter") {
			System.out.println("IoC.Adapter: "+objects[0]);
			//cmd=IoC.Resolve("IoC.Register", "AutoGenerated_MovableAdapter_IMovable", (IFunction)((obj) -> new AutoGenerated_MovableAdapter_IMovable((UObject)obj[0])) ); cmd.exec(); if(cmd!=null)System.out.println("Test33 passed\n"); else System.out.println("Test33 FAILED\n");
			//IMovable ad=new AutoGenerated_MovableAdapter_IMovable(ship1);
			//Class adName=Class.forName("AutoGenerated_MovableAdapter"+objects[0]);
			Class adName=Class.forName((String)objects[0]);
			System.out.println("adName: "+adName);
			System.out.println("Class.forName: "+AutoGenerated_MovableAdapter_IMovable.class.getName());
			IFunctionAd fAd=( (tt, obj) -> new tt((UObject)obj[1]) );
			//return( (T)fAd.run("AutoGenerated.AutoGenerated_MovableAdapter_IMovable", objects) );// ();
			//return( (T)new Class.forName("AutoGenerated.AutoGenerated_MovableAdapter_IMovable")((UObject)objects[1]) );// ();
			return( (T)new AutoGenerated_MovableAdapter_IMovable((UObject)objects[1]) );// ();
			//return( (T)new AutoGenerated_MovableAdapter_Tank_Operations_IMovable((UObject)objects[1]) );// ();	
			//return( (T)new AutoGenerated_RotatableAdapter_IRotatable((UObject)objects[1]) );// ();
		}
		else if (cname=="IoC.Register") {
			for (Object p: objects) {
				System.out.println("IoC.Register: "+p+" class="+p.getClass());
			}
			return((T)new RegisterInScopeCommand((String)objects[0], (IFunction)objects[1]));
		} else if(cname.equals("Scopes.New")) {
			System.out.println("IoC.Register: "+cname+" "+objects[0]);
			return((T)new NewScopeCommand((String)objects[0]) );
		} else if(cname.equals("Scopes.Current")) {
			System.out.println("IoC.Register: "+cname+" "+objects[0]);
			return((T)new SwitchScopeCommand((String)objects[0]) );
		} else { // call Function
			scope=sc.get();
			if(scope!=null) {
				f=scope.get(cname);
				if(f!=null)
					return((T)f.run(objects));		
			}
			System.out.println("IoC.Resolve: no such function "+cname);
		}
		return((T)cmd);
	}
}