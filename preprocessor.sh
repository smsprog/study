#!/bin/bash
echo 'Hi, preprocessor is running....'

if [[ $1 == "clean" ]] ; then
	rm -rf ./AutoGenerated/*.java
	exit 0
fi

grep -i interface ./*/*.java | awk -F":" '{print $1}' | sort -r | while read fl ; do
	ifName=$(cat $fl | grep -E -v "//|package |import |^$" | tr -d "\n" | sed -r 's/[;{}]/\n/g' | grep -i interface | sed -r 's/.*interface ([^ ]+).*/\1/')
	#echo $ifName
	if [[ "$ifName" != *"able" ]] ; then
		echo $fl': skipped'
		continue
	fi
	
	ableName=$(echo "$ifName" | sed -r 's/.*I(.+)/\1/')
	className='AutoGenerated_'$ableName'Adapter_'$ifName
	classFlName='AutoGenerated/'$className'.java'
	echo $fl': creating '$classFlName
	#cat $fl
	#echo $ifName, $ableName
	#break
	

	echo 'package AutoGenerated;' > $classFlName
	echo 'import '${ifName,,}'.*;' >> $classFlName
	echo 'import uobject.*;' >> $classFlName
	echo 'import java.util.Vector;' >> $classFlName
	echo 'import icommand.IoC;' >> $classFlName
	echo 'public class '$className' implements '$ifName' {' >> $classFlName
	echo '	UObject obj;' >> $classFlName
	echo '	public '$className'(UObject obj) {' >> $classFlName
	echo '		this.obj = obj;' >> $classFlName
	echo '	}' >> $classFlName
	
	cat $fl | grep -E -v "//|package |import |^$" | tr -d "\n" | sed -r 's/[;{}]/\n/g' | grep "(" | grep ")" | sed -r 's/([^ ]+) (.+[^(])\(([^)]*)\).*/\1 \2 \3/' | while read return method args ; do
		#echo $return, $method, $args
		if [[ "$method" == *"get"* ]] ; then
			#echo "It's GET."
			suff=${method/get/}
			echo '	public '$return' get'$suff'() throws Exception {' >> $classFlName
			echo '		return IoC.Resolve("'$ifName':'${suff,,}'.get", obj);' >> $classFlName
			echo '	}' >> $classFlName
		elif [[ "$method" == *"set"* ]] ; then
			#echo "It's SET."
			suff=${method/set/}
			#argsName=$(echo "$args" | sed -r 's/[^ ]+ +([^ ]+)/\1/')
			argsNames=$(echo $(echo "$args" | sed -r 's/,/\n/g' | sed -r 's/.+ ([^ ]+)/\1/') | sed -r 's/ /, /g')
			if [[ "$return" == "void" ]] ; then
				ifReturn=''
			else
				ifReturn='return '
			fi
			echo '	public '$return' set'$suff'('$args') throws Exception {' >> $classFlName
			echo '		'$ifReturn'IoC.Resolve("'$ifName':'${suff,,}'.set", obj, '$argsNames');' >> $classFlName
			echo '	}' >> $classFlName
		else 
			#echo 'Something else: '$method
			if [[ "$return" == "void" ]] ; then
				ifReturn=''
			else
				ifReturn='return(0);'
			fi
			echo '	public '$return' '$method'('$args'){ '$ifReturn' }' >> $classFlName
		fi
	done
	
	echo '}' >> $classFlName
	
	#break
done